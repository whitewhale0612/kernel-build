-name: Kernel Builder

on:
  workflow_dispatch:
  push:
    branches: [v7]

jobs:
  kernel-build:
    runs-on: ubuntu-latest
    timeout-minutes: 120

    steps:
    - name: Checkout Kernel Source
      uses: actions/checkout@v4
      with:
        repository: whitewhale0612/android_kernel_common_oneplus_sm8750
        ref: v9
        path: kernel_source

    # 下载并设置 clang-19-20240723
    - name: Setup zyclang Toolchain
      run: |
         
          echo "正在克隆zyClang19工具链..." &&
          mkdir -p clang &&
          aria2c -s16 -x16 -k1M https://github.com/ZyCromerZ/Clang/releases/download/19.0.0git-20240723-release/Clang-19.0.0git-20240723.tar.gz -o clang.tar.gz &&
          tar -xzf clang.tar.gz -C clang
          
         # echo "正在克隆构建工具..." &&
         # aria2c -s16 -x16 -k1M https://github.com/cctv18/oneplus_sm8650_toolchain/releases/download/LLVM-Clang20-r547379/build-tools.zip -o build-tools.zip &&
         # unzip -q build-tools.zip &&
           echo "所有源码及工具链初始化完成！"
         #如果需要别的工具可以自行补充！！ 
          
    - name: Install Build Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          git make python3 flex bison libssl-dev libncurses-dev \
          bc rsync kmod cpio lbzip2 device-tree-compiler \
          libelf-dev llvm lld  # Clang 编译所需额外依赖
        sudo apt install ccache
        sudo apt install pahole
        
    - name: sukisu support
    
       cd kernel_source
        curl -LSs "https://raw.githubusercontent.com/ShirkNeko/SukiSU-Ultra/main/kernel/setup.sh" | bash -s susfs-dev
       cd ~
    # 使用 zyclang 的配置和编译步骤
    - name: Configure Kernel
      run: |


       WORKDIR="$(pwd)"
          export PATH="/usr/lib/ccache:$PATH"
          export PATH="$WORKDIR/clang/bin:$PATH"
          #export PATH="$WORKDIR/build-tools/bin:$PATH"
          CLANG_DIR="$WORKDIR/clang/bin"
          CLANG_VERSION="$($CLANG_DIR/clang --version | head -n 1)"
          LLD_VERSION="$($CLANG_DIR/ld.lld --version | head -n 1)"
          echo "编译器信息:"
          clang --version
          pahole_version=$(pahole --version 2>/dev/null | head -n1); [ -z "$pahole_version" ] && echo "pahole版本：未安装" || echo "pahole版本：$pahole_version"
          
          export CCACHE_COMPILERCHECK="%compiler% -dumpmachine; %compiler% -dumpversion"
          export CCACHE_NOHASHDIR="true"
          export CCACHE_HARDLINK="true"
          export CCACHE_DIR="${{ env.CCACHE_DIR }}"
          export CCACHE_MAXSIZE="20G"
        cd kernel_source
        make ARCH=arm64 SUBARCH=arm64 O=out \
          LLVM=1 \
          LLVM_IAS=1 \
          CC="ccache clang" \
          CXX="ccache clang++" \
          HOSTCC="ccache clang" \
          HOSTCXX="ccache clang++" \
          CLANG_TRIPLE=aarch64-linux-gnu- \
          CROSS_COMPILE=aarch64-linux-gnu- \
          CROSS_COMPILE_ARM32=arm-linux-gnueabi- \
          CLANG_AUTOFDO_PROFILE="../android/gki/aarch64/afdo/kernel.afdo" \
          gki_defconfig
        make ARCH=arm64 SUBARCH=arm64 -j$(nproc --all) O=out \
          LLVM=1 \
          LLVM_IAS=1 \
          CC="ccache clang" \
          CXX="ccache clang++" \
          HOSTCC="ccache clang" \
          HOSTCXX="ccache clang++" \
          CLANG_TRIPLE=aarch64-linux-gnu- \
          CROSS_COMPILE=aarch64-linux-gnu- \
          CROSS_COMPILE_ARM32=arm-linux-gnueabi- \
          CLANG_AUTOFDO_PROFILE="../android/gki/aarch64/afdo/kernel.afdo"
          echo ">>> 内核编译成功！"

          
    - name: Package Artifacts
      run: |
          cd kernel_source/out/arch/arm64/boot
          mkdir artifacts
          cp Image.gz Image artifacts/

       
          echo "v8-build-$(date +%Y%m%d-%H%M)" > artifacts/build-info.txt
          tar czf kernel_artifacts.tar.gz artifacts/*



    - name: Upload Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: sm8750-kernel-zyclang-artifacts
        path: kernel_source/out/arch/arm64/boot/kernel_artifacts.tar.gz

